name: Terraform Format Check
on:
  workflow_call:
    inputs:
      terraform_directory:
        description: 'The directory in which target terraform code resides.'
        required: true
        type: string
jobs:
  terraform-format:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.terraform_directory }}
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.1
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style - 📁 ${{ inputs.terraform_directory }}')
            })
            const output = `#### Terraform Format and Style - 📁 ${{ inputs.terraform_directory }} 🖌 \`${{ steps.fmt.outcome }}\`

            *Impacted Files:* \`${{ steps.fmt.outputs.stdout || 'None' }}\`

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.terraform_directory }}\`, Workflow: \`${{ github.workflow }}\`*`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
